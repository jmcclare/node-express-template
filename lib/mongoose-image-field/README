# mongoose-image-field #

Mongoose Image Field is an image file attachment plugin for
[Mongoose.js](http://mongoosejs.com/). It adds a field to your Mongoose schema
that can store an image file in a specified set of formats. It adds methods for
attaching, linking and deleting attached image files.

The files are expected to be [Multer](https://github.com/expressjs/multer) file
objects, but you can create an object with the same fields filled in to store
any file you have on the local disk.


## Usage ##

In the file where you define your schema. In this example, we'll call it
`postSchema` and the `Post` model.

    iff = require 'mongoose-image-field'

    # Define the schema
    postSchema = mongoose.Schema
      name:
        type: String
        required: true

    # Set the options
    iffOptions =
      fieldName: 'header'
      imageStoreOptions:
        formats:
          embedded:
            width: 500
            height: 300
            fileType: 'JPEG'
          thumbnail:
            width: 80
            height: 50
            resizeType: 'force'
            fileType: 'JPEG'
        fileStoreOptions:
          collection: 'post-header'

    # Add the iff plugin
    postSchema.plugin iff, fOptions

    Post = mongoose.model('Post', postSchema)

    module.exports = Post

### Plugin Options ###

`fieldName`: The name of the image field to add to the schema. You can add
multiple image fields with this plugin, but you must give each of them a unique
name. Defaults to 'image'.

`imageStoreOptions`: Options object to pass to `ImageStore` when storing the
image file. See the `image-store` docs for available options. This can be
omitted completely, but you really should set your preferred format options.

### Functions ###

#### updateif ####

To attach a new image file, in a route that handles a file upload form:

    if req.files.file1.length > 0
      post.updateif 'image', req.files.file1, (err) ->
        if err
          debug err
          req.flash 'error', 'Error storing file 1.'
        post.save (err) ->
          if err
            debug err
            req.flash 'error', 'Post could not be saved.'
          else
            req.flash 'info', 'Post saved.'
          return res.redirect app.locals.urls['posts']

The first parameter is the name of the image file field you are updating.

The second parameter is expected to be a `multer` file object, or an object
with the same fields filled in with the path to a file on disk that is to be
moved into storage.

The third field can be an options object for `ImageStore::store()`. See the
`ImageStore` docs for more on that. It is best to only set file specific
options here like `name` or `description`.

The last parameter is a callback function that takes an `Error` object which
will be `null` if no errors are encountered.

#### ifurl ####

To get the URL of an image field's file:

  imageURL = post.ffurl 'download', 'embedded'

The first parameter is the name of the image field.

The second parameter is the name of the image format you want the URL for. This
defaults to 'original' if left blank, which is the original image file.

It returns the URL of the image field's stored file as generated by
`ImageStore`.  It returns an empty string if the field currently does not have
a stored file.

#### clearif ####

To delete an image field's stored file:

  post.clearif 'image', (err)->
    if err
      # deal with the error however you wish
      debug err
    else
      # The image files were successfully deleted
      # move on and do other stuffâ€¦

The first parameter is the name of the image field to clear.

The second is a callback function that takes an optional `Error` object.
